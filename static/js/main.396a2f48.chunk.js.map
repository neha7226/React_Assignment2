{"version":3,"sources":["Form.js","App.js","reportWebVitals.js","index.js"],"names":["Form","useState","FirstName","LastName","email","subject","userRegistration","setUserRegistration","records","setRecords","handleInput","e","name","target","value","console","log","className","action","onSubmit","preventDefault","newRecord","id","Date","getTime","toString","type","autoComplete","onChange","htmlFor","map","curElem","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6PA4GeA,EA1GF,WACT,MAA6CC,mBACzC,CACIC,UAAU,GACVC,SAAS,GACTC,MAAM,GACNC,QAAQ,UALhB,mBAAOC,EAAP,KAAwBC,EAAxB,KASA,EAA2BN,mBAAS,IAApC,mBAAOO,EAAP,KAAeC,EAAf,KACMC,EAAY,SAACC,GACf,IAAMC,EAAKD,EAAEE,OAAOD,KACdE,EAAMH,EAAEE,OAAOC,MACrBC,QAAQC,IAAIJ,EAAKE,GACjBP,EAAoB,2BAAID,GAAL,kBAAuBM,EAAOE,MAarD,OACI,gCACI,sBAAKG,UAAU,SAAf,UACA,8CACA,uBAAMC,OAAO,GAAGC,SAZJ,SAACR,GACjBA,EAAES,iBAEF,IAAMC,EAAS,2BAAOf,GAAP,IAAyBgB,IAAG,IAAIC,MAAOC,UAAUC,aAChEhB,EAAW,GAAD,mBAAKD,GAAL,CAAaa,MAQnB,UACA,sBAAKJ,UAAU,YAAf,UACI,uBAAOS,KAAK,OAAOC,aAAa,MAAMf,KAAK,YAC3CE,MAAOR,EAAiBJ,UACxB0B,SAAUlB,EACVY,GAAG,cACH,yBACA,uBAAOO,QAAQ,YAAf,2BAGJ,sBAAKZ,UAAU,YAAf,UAEI,uBAAOS,KAAK,OAAQC,aAAa,MAAMf,KAAK,WAC5CE,MAAOR,EAAiBH,SACxByB,SAAUlB,EACVY,GAAG,eACH,yBACA,uBAAOO,QAAQ,WAAf,0BAGJ,sBAAKZ,UAAU,YAAf,UAEI,uBAAOS,KAAK,OAAOC,aAAa,MAAMf,KAAK,QAC3CE,MAAOR,EAAiBF,MACxBwB,SAAUlB,EACVY,GAAG,UACH,yBACA,uBAAOO,QAAQ,QAAf,sBAGJ,gCACA,uBAAOA,QAAQ,UAAUZ,UAAU,MAAnC,sBACI,yBAAQL,KAAK,UAAUE,MAAOR,EAAiBD,QAC/CuB,SAAUlB,EADV,UAEI,wBAAQI,MAAM,QAAd,mBACA,wBAAQA,MAAM,UAAd,qBACA,wBAAQA,MAAM,SAAd,qBACA,wBAAQA,MAAM,OAAd,qBAEJ,4BAIJ,8BACI,wBAAQG,UAAU,SAASS,KAAK,SAAhC,8BAKJ,qBAAKT,UAAU,UAAf,SAEQT,EAAQsB,KAAI,SAACC,GACkCA,EAArCT,GAAN,IAASpB,EAAkC6B,EAAlC7B,UAAUC,EAAwB4B,EAAxB5B,SAASC,EAAe2B,EAAf3B,MAAMC,EAAS0B,EAAT1B,QAClC,OAEI,gCACA,8BAAIH,EAAJ,YACA,8BAAIC,EAAJ,YACA,8BAAIC,EAAJ,YACA,8BAAIC,EAAJ,cAJU0B,EAAQT,aC9E/BU,MARf,WACE,OACE,qBAAKf,UAAU,MAAf,SACE,cAAC,EAAD,OCMSgB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.396a2f48.chunk.js","sourcesContent":["import React,{useState} from 'react';\r\n\r\nconst Form = ( ) => {\r\n    const [userRegistration,setUserRegistration]=useState(\r\n        {\r\n            FirstName:\"\",\r\n            LastName:\"\",\r\n            email:\"\",\r\n            subject:\"React\"\r\n        }\r\n    );\r\n\r\n    const [records,setRecords]=useState([]);\r\n    const handleInput=(e) =>{\r\n        const name=e.target.name;\r\n        const value=e.target.value;\r\n        console.log(name,value);\r\n        setUserRegistration({...userRegistration,[name] :value})\r\n       \r\n    }\r\n\r\n    \r\n    const handleSubmit =(e) => {\r\n        e.preventDefault();\r\n\r\n        const newRecord ={ ...userRegistration, id:new Date().getTime().toString()}\r\n        setRecords([...records,newRecord])\r\n\r\n        // setUserRegistration({FirstName:\"\",LastName:\"\",email:\"\",subject:\"react\"});\r\n    }\r\n    return (\r\n        <div>\r\n            <div className=\"center\">\r\n            <h1>Registration</h1>\r\n            <form action=\"\" onSubmit={handleSubmit}>\r\n            <div className=\"txt_field\">\r\n                <input type=\"text\" autoComplete=\"off\" name=\"FirstName\" \r\n                value={userRegistration.FirstName}\r\n                onChange={handleInput}\r\n                id=\"FirstName\"></input>\r\n                <spna></spna>\r\n                <label htmlFor=\"FirstName\">First Name</label>\r\n            </div>\r\n\r\n            <div className=\"txt_field\">\r\n                \r\n                <input type=\"text\"  autoComplete=\"off\" name=\"LastName\" \r\n                value={userRegistration.LastName}\r\n                onChange={handleInput}\r\n                id=\"SecondName\"></input>\r\n                <spna></spna>\r\n                <label htmlFor=\"LastName\" >Last Name</label>\r\n            </div>\r\n\r\n            <div className=\"txt_field\">\r\n                \r\n                <input type=\"text\" autoComplete=\"off\" name=\"email\" \r\n                value={userRegistration.email}\r\n                onChange={handleInput}\r\n                id=\"Email\"></input>\r\n                <spna></spna>\r\n                <label htmlFor=\"Email\">Email</label>\r\n            </div>\r\n\r\n            <div >\r\n            <label htmlFor=\"subject\" className=\"sub\">Subject </label>\r\n                <select name=\"subject\" value={userRegistration.subject}\r\n                onChange={handleInput}>\r\n                    <option value='React'>React</option>\r\n                    <option value='Angular'>Angular</option>\r\n                    <option value='NodeJs'>Node Js</option>\r\n                    <option value='Java'>Java</option>\r\n                </select>\r\n                <spna></spna>\r\n                \r\n            </div>\r\n\r\n            <div>\r\n                <button className=\"submit\" type=\"submit\">Register</button>\r\n            </div>\r\n            </form>\r\n            </div>\r\n\r\n            <div className=\"details\">\r\n                {\r\n                    records.map((curElem)=>{\r\n                        const{id,FirstName,LastName,email,subject}=curElem;\r\n                        return(\r\n                            \r\n                            <div key={curElem.id}>\r\n                            <p>{FirstName}&ensp;</p>\r\n                            <p>{LastName}&ensp;</p>\r\n                            <p>{email}&ensp;</p>\r\n                            <p>{subject}&ensp;</p>\r\n                        </div>\r\n                        )\r\n                        \r\n                        \r\n                    }\r\n\r\n                    )\r\n                }\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Form;","import './App.css';\nimport Form from './Form';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Form/>\n    </div>\n  );\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}